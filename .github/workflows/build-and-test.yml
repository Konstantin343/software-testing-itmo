name: Build & Test
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '14'

jobs:
  Backend-Tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Backend
        working-directory: spring-backend
        run: ./mvnw compile test-compile

      - name: Run Backend Tests
        working-directory: spring-backend
        run: ./mvnw test

      - name: Build Adoc PDF
        uses: tonynv/asciidoctor-action@v2
        with:
          program: "asciidoctor-pdf -a allow-uri-read -D . spring-backend/src/main/asciidoc/index.adoc"

      - name: Upload Adoc PDF Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs.pdf
          path: index.pdf

      - name: Upload Allure Reports Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: backend-allure-results
          path: spring-backend/target/allure-results

  Frontend-Tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Run Frontend Tests
        working-directory: client
        run: npm test

  End-To-End-Tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    needs: [ Backend-Tests, Frontend-Tests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Start Backend
        working-directory: spring-backend
        run: ./mvnw spring-boot:run &

      - name: Run E2E Cypress Tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: client
          start: npm start
          wait-on: 'http://localhost:5000/places-lists, http://localhost:3000'
          wait-on-timeout: 120
          headless: true
          browser: chrome

      - name: Run E2E Playwirght Tests
        working-directory: client
        run: npx playwright test src/tests/e2e/*.spec.*js --workers=1 --config=src/tests/e2e/playwright.config.ts

  Upload-Allure-Report:
    name: Upload Allure Report
    runs-on: ubuntu-latest
    if: always()
    #    # uncomment after hw check
    #    if: ${{ github.event_name == 'refs/heads/main' }}

    needs: [ Backend-Tests, Frontend-Tests, End-To-End-Tests ]
    steps:
      - name: Download backend allure results
        uses: actions/download-artifact@v2
        with:
          name: backend-allure-results
          path: allure-results

      - name: Create allure report
        uses: simple-elf/allure-report-action@v1.5
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Deploy report to Github Pages
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: allure-reports-pages
          PUBLISH_DIR: allure-history
